<?php

namespace Test\Ease;

use Ease\User;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-17 at 23:58:22.
 */
class UserTest extends AnonymTest {

    /**
     * @var User
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new User();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * Test Constructor
     *
     * @covers Ease\User::__construct
     */
    public function testConstructor() {
        $classname = get_class($this->object);

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
                ->disableOriginalConstructor()
                ->getMockForAbstractClass();
        $mock->__construct('test', ['debug' => false]);

        $this->assertEmpty($mock->getData());
    }

    /**
     * @covers Ease\User::getUserName
     */
    public function testGetUserName() {
        $this->object->setDataValue('login', 'vitex');
        $this->assertEquals('vitex', $this->object->getUserName());
    }

    /**
     * @covers Ease\User::getUserEmail
     */
    public function testGetUserEmail() {
        $this->object->setDataValue('email', 'info@vitexsoftware.cz');
        $this->assertEquals('info@vitexsoftware.cz', $this->object->getUserEmail());
    }

    /**
     * @covers Ease\User::draw
     */
    public function testDraw($whatWant = null) {
        $this->assertEquals('', $this->object->draw());
    }

    /**
     * @covers Ease\User::getIcon
     */
    public function testGetIcon() {
        $this->assertEmpty($this->object->getIcon());
        $this->object->setDataValue('email', 'info@vitexsoftware.cz');
        $this->assertEquals('http://www.gravatar.com/avatar/f00226a1c6fe891010a2543531ed432c?s=800&d=mm&r=g', $this->object->getIcon());
    }

    /**
     * @covers Ease\User::tryToLogin
     */
    public function testTryToLogin() {
        $this->assertEmpty($this->object->tryToLogin([]));
        $this->assertEmpty($this->object->tryToLogin(['login'=>'','password'=>'']));
        $this->assertFalse($this->object->logged, $this->object->tryToLogin(['login' => 'vitex', 'password' => 'secret']));
    }

    /**
     * @covers Ease\User::isAccountEnabled
     */
    public function testIsAccountEnabled() {
        $this->assertTrue($this->object->isAccountEnabled());
        $this->object->disableColumn = 'state';
        $this->object->setDataValue('state', true);
        $this->assertFalse($this->object->isAccountEnabled());
        $this->object->setDataValue('state', false);
        $this->assertTrue($this->object->isAccountEnabled());
    }

    /**
     * @covers Ease\User::loginSuccess
     */
    public function testLoginSuccess() {
        $this->object->loginSuccess();
        $this->assertTrue($this->object->logged);
    }

    /**
     * @covers Ease\User::loadSettings
     *
     * @todo   Implement testLoadSettings().
     */
    public function testLoadSettings() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::saveSettings
     *
     * @todo   Implement testSaveSettings().
     */
    public function testSaveSettings() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::getSettings
     *
     * @todo   Implement testGetSettings().
     */
    public function testGetSettings() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::passwordValidation
     * @covers Ease\User::encryptPassword
     */
    public function testPassword() {
        $encrypted = \Ease\User::encryptPassword('password');
        $this->assertNotEmpty($encrypted);
        $this->assertTrue(\Ease\User::passwordValidation('password', $encrypted));

        $this->assertFalse(\Ease\User::passwordValidation('X', $encrypted));

        $this->assertFalse(\Ease\User::passwordValidation('X', 'x:x:x'));
    }

    /**
     * @covers Ease\User::passwordChange
     */
    public function testPasswordChange() {
        $this->assertFalse($this->object->passwordChange('newpass'));
    }

    /**
     * @covers Ease\User::getUserID
     *
     * @todo   Implement testGetUserID().
     */
    public function testGetUserID() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::getUserLogin
     * @covers Ease\User::setUserLogin
     */
    public function testUserLogin() {
        $this->assertTrue($this->object->setUserLogin('vitex'));
        $this->assertEquals('vitex', $this->object->getUserLogin());
    }

    /**
     * @covers Ease\User::getPermission
     *
     * @todo   Implement testGetPermission().
     */
    public function testGetPermission() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::logout
     */
    public function testLogout() {
        $this->assertTrue($this->object->logout());
        $this->assertFalse($this->object->logged);
    }

    /**
     * @covers Ease\User::getSettingValue
     *
     * @todo   Implement testGetSettingValue().
     */
    public function testGetSettingValue() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::setSettings
     *
     * @todo   Implement testSetSettings().
     */
    public function testSetSettings() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::setSettingValue
     *
     * @todo   Implement testSetSettingValue().
     */
    public function testSetSettingValue() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::loadPermissions
     *
     * @todo   Implement testLoadPermissions().
     */
    public function testLoadPermissions() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::getName
     *
     * @todo   Implement testGetName().
     */
    public function testGetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::saveToSQL
     *
     * @todo   Implement testSaveToSQL().
     */
    public function testSaveToSQL() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::loadFromSQL
     *
     * @todo   Implement testLoadFromSQL().
     */
    public function testLoadFromSQL() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::getGravatar
     *
     * @todo   Implement testGetGravatar().
     */
    public function testGetGravatar() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Ease\User::setObjectName
     *
     * @todo   Implement testSetObjectName().
     */
    public function testSetObjectName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
