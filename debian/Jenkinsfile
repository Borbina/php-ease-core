#!groovy
String[] architectures = ['amd64', 'armhf', 'aarch64']
String[] distributions = ['debian:buster', 'debian:bullseye', 'debian:bookworm', 'ubuntu:focal', 'ubuntu:hirsute', 'ubuntu:impish']

String vendor = 'vitexsoftware'
String distribution = ''
String architecture = ''
String dist[] str
String buildArgs = ''
String distroFamily = ''
String distroCodename = ''
String ver = ''

architectures.each {
    architecture = it
    distributions.each {
        distribution = it

        dist = distribution.split(':')
        distroFamily = dist[0]
        distroCodename = dist[1]

        buildArgs = ' --platform linux/' + architecture + ' -t ' + vendor + '/' + distribution

        def buildImage = ''


        node( architecture ) {
            ansiColor('xterm') {
                stage('Checkout ' + architecture + '/' + distribution) {
                    checkout scm
                    buildImage = docker.image(vendor + '/' + distribution, buildArgs)

                    def VERSION = sh (
                        script: 'dpkg-parsechangelog --show-field Version',
                        returnStdout: true
                    ).trim()

                    ver = VERSION + '~' + distroCodename + '~' + env.BUILD_NUMBER

                }
                stage('Build ' + architecture + '/' + distribution) {
                    buildImage.inside {
                        sh 'dch -b -v ' + VER  + ' "' + env.BUILD_TAG  + '"'
                        sh 'sudo apt-get update'
                        sh 'debuild-pbuilder  -i -us -uc -b'
                        sh 'mkdir -p $WORKSPACE/dist/debian/ ; rm -rf $WORKSPACE/dist/debian/* ; for deb in $(cat debian/files | awk \'{print $1}\'); do mv "../$deb" $WORKSPACE/dist/debian/; done'
                    }
                }
                stage('Test ' + architecture + '/' + distribution) {
                    buildImage.inside {
                        def DEBCONF_DEBUG=0 //Set to "5" or "developer" to debug debconf
                        sh 'cd $WORKSPACE/dist/debian/ ; dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz; cd $WORKSPACE'
                        sh 'echo "deb [trusted=yes] file:///$WORKSPACE/dist/debian/ ./" | sudo tee /etc/apt/sources.list.d/local.list'
                        sh 'sudo apt-get update'
                        sh 'echo "${GREEN} INSTALATION ${ENDCOLOR}"'
                        sh 'IFS="\n\b"; for package in  `ls $WORKSPACE/dist/debian/ | grep .deb | awk -F_ \'{print \$1}\'` ; do  echo -e "${GREEN} installing ${package} on `lsb_release -sc` ${ENDCOLOR} " ; sudo  DEBIAN_FRONTEND=noninteractive DEBCONF_DEBUG=' + DEBCONF_DEBUG  + ' apt-get -y install $package ; done;'
                    }
                }
                stage('Copy artifacts ' + architecture + '/' + distribution ) {
                    step ([$class: 'CopyArtifact',
                        projectName: '${JOB_NAME}',
                        filter: '**/*.deb',
                        target: '/var/tmp/deb',
                        flatten: true,
                        selector: specific('${BUILD_NUMBER}')
                    ])
                }
            }
        }
    }
}
